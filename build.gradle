buildscript {
	repositories {
		mavenCentral()
	}
}

plugins {
	id 'java' // 테스트, 번들링 기능과 함께 Java 컴파일을 추가해주며, 다른 JVM 언어 플러그인의 기반이 됨
	id 'org.springframework.boot' version '3.1.5' // 실행가능한 jar 또는 war로 패키징하여 애플리케이션 실행이 가능하도록 하며, spring-boot-dependencies 기반의 의존성 관리를 사용함
	id 'io.spring.dependency-management' version '1.1.3' // 자동으로 spring-boot-dependencies bom을 끌어와서 버전 관리를 해줌
}

allprojects {
	sourceCompatibility = '17'
	targetCompatibility = '17'

	// 라이브러리들을 받아올 원격 저장소들을 설정함
	repositories {
		mavenCentral()
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'idea'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'com.programmers'
	version = '0.0.1-SNAPSHOT'

	sourceCompatibility = '17'

	configurations {
		compileOnly {
			extendsFrom annotationProcessor
		}
		asciidoctorExt
	}

	dependencies {
		implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
		implementation 'org.springframework.boot:spring-boot-starter-web'
		compileOnly 'org.projectlombok:lombok'
		runtimeOnly 'com.h2database:h2'
		runtimeOnly 'com.mysql:mysql-connector-j'
		annotationProcessor 'org.projectlombok:lombok'
		testImplementation 'org.springframework.boot:spring-boot-starter-test'

		// spring security
		implementation 'org.springframework.boot:spring-boot-starter-security'
		testImplementation 'org.springframework.security:spring-security-test'
	}

	test {
		useJUnitPlatform()
	}
}

project(':core') {
	dependencies {}
}

project(':api') {
	dependencies {
		implementation project(':core')
	}
}

project(':batch') {
	dependencies {
		implementation project(':core')
	}
}
